<% page = { 'title' : 'Frontier: Async', 'key': 'FRONTIER_PAGE_NAME'} %>
<% assets = { 'css' : ['common.css','frontier/async.css'], 'js' : ['frontier/async.js'] } %>

<%- partial('partials/frontier-nav') %>

	<p>I implemented the asychronous programming requirement as part of the "custom directive tag" as demonstrated on the Directive tab.</p>
	<p>The page makes 3 calls back to the server for the time, date, and zodiac sign.  It first fetches the date, then it calls for the Zodiac Sign passing the month and date into the getZodiac() function to get the Zodiac Sign.  I used jQuery deferred objects to coordinate the calls.  The jQuery ajax calls already return read only deferred objects that can be used in a $.when statement like this: </p>
	<pre><code>$.when($scope.getDateDeferred, $scope.getTimeDeferred)
    $.when(getDatePromise)
      .done(function (dateRes) {
        $scope.getZodiac(dateRes.month, dateRes.date);
      })
      .fail(function () {
        console.log("error getting Zodiac; getDate failed");
      })
      .always( function () {
        //when all three results are retrieved, update serverData to display results
        $.when(getDatePromise, getTimePromise, getZodiacPromise)
          .done(function () {
            $scope.serverData.date = tmpDateRes.dateStr;
            $scope.serverData.time = tmpTime;
            $scope.serverData.zodiac = tmpZodiac;
            $scope.$digest();
            console.log("synchronization of getDate, getTime and getZodiac succeeded.");
          })
          .fail(function () {
            console.log("synchronization of three async calls failed.");
      });
    });
	</code></pre>
	<p>Note that I use the $.when(getDatePromise, getTimePromise, getZodiacPromise) call to insure all data is returned before displaying any results.</p>
